openapi: 3.0.3
info:
  title: Auth Service API
  description: Authentication service for user registration, login, and verification
  version: 1.0.0
  contact:
    name: Auth Service
    email: support@example.com

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://auth-service.choreo.dev
    description: Production server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the auth service
      operationId: getHealth
      tags:
        - Health
      security: [] # This makes the endpoint public (no authentication required)
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  service:
                    type: string
                    example: auth-service
                  database:
                    type: string
                    example: connected

  /api/auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with email, password, and name
      operationId: registerUser
      tags:
        - Authentication
      security: [] # This makes the endpoint public (no authentication required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 6
                  example: password123
                name:
                  type: string
                  example: John Doe
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict - user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/auth/login:
    post:
      summary: User login
      description: Authenticate user and return JWT token
      operationId: loginUser
      tags:
        - Authentication
      security: [] # This makes the endpoint public (no authentication required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/auth/verify:
    get:
      summary: Verify JWT token
      description: Verify the validity of a JWT token
      operationId: verifyToken
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token is valid
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: John Doe
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"

    Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid request data

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Health
    description: Health check operations
  - name: Authentication
    description: User authentication operations
